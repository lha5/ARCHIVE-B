// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Comment {
    id          String   @id @default(cuid())
    name        String?
    password    String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    content     String

    author      User?    @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId    String?

    post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId      String

    @@index([authorId])
    @@index([postId])
}

model Post {
    id              String   @id @default(cuid())
    name            String?
    password        String?
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    type            String
    content         String
    image           String?
    isSecret        Boolean? @default(false)
    secretPassword  String?
    isFolded        Boolean? @default(false)
    isForMembers    Boolean? @default(false)
    isForAdmin      Boolean? @default(false)

    author          User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId        String

    comments        Comment[]

    @@index([authorId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid()) @unique
    userId            String  @unique
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid()) @unique
    name          String?
    image         String?
    role          Role      @default(USER)
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    comments      Comment[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Role {
    USER
    ADMIN
}
